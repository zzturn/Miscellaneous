#!/usr/bin/env python3
# #popclip
# name: GitHub Raw ↔️ Repo
# icon: iconify:simple-icons:github
# language: python3
# after: show-status
# requirements: ["url"]

import os
import re
import sys
import webbrowser
from urllib.parse import urlparse, urlunparse

text = os.environ['POPCLIP_TEXT'].strip()

def add_protocol_if_missing(url):
    if not re.match(r'^https?://', url):
        url = 'https://' + url
    return url

def remove_url_fragment(url):
    """去除 # 后面的锚点"""
    p = urlparse(url)
    return urlunparse(p._replace(fragment=''))

def is_github_repo_url(url):
    # 只处理带 blob/tree 的文件路径
    return bool(re.match(r'^https?://(www\.)?github\.com/[^/]+/[^/]+/(blob|tree)/.+', url))

def is_github_gist_url(url):
    # gist.github.com/username/gistid
    return bool(re.match(r'^https?://gist\.github\.com/[^/]+/[a-f0-9]+', url))

def is_github_raw_url(url):
    # raw.githubusercontent.com/user/repo/branch/path
    return bool(re.match(r'^https?://raw\.githubusercontent\.com/[^/]+/[^/]+/.+', url))

def is_gist_raw_url(url):
    # gist.githubusercontent.com/username/gistid/raw/...
    return bool(re.match(r'^https?://gist\.githubusercontent\.com/[^/]+/[a-f0-9]+/raw(?:/.*)?', url))

def github_to_raw(url):
    # 仅支持带 blob 的文件
    m = re.match(r'^https?://github\.com/([^/]+)/([^/]+)/(blob|tree)/([^/]+)/(.*)', url)
    if m:
        user, repo, _, branch, path = m.groups()
        return f'https://raw.githubusercontent.com/{user}/{repo}/{branch}/{path}'
    return None

def raw_to_github(url):
    m = re.match(r'^https?://raw\.githubusercontent\.com/([^/]+)/([^/]+)/([^/]+)/(.*)', url)
    if m:
        user, repo, branch, path = m.groups()
        return f'https://github.com/{user}/{repo}/blob/{branch}/{path}'
    return None

def gist_to_raw(url):
    # 支持带锚点的 gist 链接
    url = remove_url_fragment(url)
    m = re.match(r'^https?://gist\.github\.com/([^/]+)/([a-f0-9]+)', url)
    if m:
        user, gistid = m.groups()
        return f'https://gist.githubusercontent.com/{user}/{gistid}/raw'
    return None

def gist_raw_to_gist(url):
    # gist.githubusercontent.com/username/gistid/raw
    m = re.match(r'^https?://gist\.githubusercontent\.com/([^/]+)/([a-f0-9]+)/raw', url)
    if m:
        user, gistid = m.groups()
        return f'https://gist.github.com/{user}/{gistid}'
    return None

def main(text):
    url = add_protocol_if_missing(text)
    out_url = None

    if is_github_repo_url(url):
        out_url = github_to_raw(url)
    elif is_github_raw_url(url):
        out_url = raw_to_github(url)
    elif is_github_gist_url(url):
        out_url = gist_to_raw(url)
    elif is_gist_raw_url(url):
        out_url = gist_raw_to_gist(url)
    else:
        print("不支持的 GitHub/Gist 链接格式。")
        sys.exit(1)

    if not out_url:
        print("无法转换该链接。")
        sys.exit(1)

    print("打开链接：", out_url)
    webbrowser.open(out_url)

if __name__ == '__main__':
    main(text)
    #main("https://gist.github.com/fedarko/4fc177cff9084b9e325dcbe954547edc/raw/gh_url_to_raw_gh_url.py")
    #main("https://gist.github.com/fedarko/4fc177cff9084b9e325dcbe954547edc")
    #main("https://github.com/89996462/Quantumult-X/blob/main/ycdz/Picsew.js")
    #main("https://raw.githubusercontent.com/89996462/Quantumult-X/main/ycdz/Picsew.js")
    #main("github.com/89996462/Quantumult-X/blob/main/ycdz/Picsew.js")
    #main("raw.githubusercontent.com/89996462/Quantumult-X/main/ycdz/Picsew.js")
